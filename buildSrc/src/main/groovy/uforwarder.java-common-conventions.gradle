/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Apply the java Plugin to add support for Java.
    id 'java'
    id 'jacoco'
    id 'maven-publish'
}

jacoco {
    toolVersion = "0.8.8"
}

dependencies {
    constraints {
        // Define dependency versions as constraints
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'ch.qos.logback:logback-core:1.2.3'
        implementation 'com.101tec:zkclient:0.11'
        implementation 'com.facebook.infer.annotation:infer-annotation:0.17.0'
        implementation 'com.github.stefanbirkner:system-rules:1.19.0'
        implementation 'com.google.api:api-common:1.7.0'
        implementation 'com.google.api.grpc:proto-google-common-protos:1.17.0'
        implementation 'com.google.guava:guava:24.1.1-jre'
        implementation 'com.google.protobuf:protobuf-java-util:3.19.1'
        implementation 'com.google.protobuf:protobuf-java:3.19.1'
        implementation 'com.netflix.concurrency-limits:concurrency-limits-core:0.3.6'
        implementation 'com.uber.concurrency-loadbalancer:concurrency-loadbalancer-core:0.1.5'
        implementation 'com.uber.m3:tally-core:0.13.0'
        implementation 'com.uber.m3:tally-m3:0.13.0'
        implementation 'io.grpc:grpc-core:1.49.2'
        implementation 'io.grpc:grpc-netty-shaded:1.49.2'
        implementation 'io.grpc:grpc-protobuf:1.49.2'
        implementation 'io.grpc:grpc-services:1.49.2'
        implementation 'io.grpc:grpc-stub:1.49.2'
        implementation 'io.jaegertracing:jaeger-core:0.35.5'
        implementation 'io.micrometer:micrometer-core:1.9.2'
        implementation 'io.netty:netty-codec-http2:4.1.78.Final'
        implementation 'io.netty:netty-handler-proxy:4.1.78.Final'
        implementation 'io.opentracing:opentracing-api:0.32.0'
        implementation 'io.opentracing:opentracing-noop:0.32.0'
        implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
        implementation 'javax.inject:javax.inject:1'
        implementation 'net.jodah:failsafe:2.4.4'
        implementation 'net.logstash.logback:logstash-logback-encoder:4.11'
        implementation 'org.apache.commons:commons-lang3:3.10'
        implementation 'org.apache.curator:curator-recipes:4.3.0'
        implementation 'org.apache.curator:curator-x-async:4.3.0'
        implementation 'org.apache.kafka:kafka-clients:2.8.2'
        implementation 'org.apache.kafka:kafka_2.12:2.8.2'
        implementation 'org.apache.logging.log4j:log4j-core:2.16.0'
        implementation 'org.apache.zookeeper:zookeeper:3.5.9'
        implementation 'org.slf4j:slf4j-api:1.7.30'
        implementation 'org.springframework:spring-beans:5.3.30'
        implementation 'org.springframework:spring-context:5.3.30'
        implementation 'org.springframework:spring-core:5.3.30'
        implementation 'org.springframework.boot:spring-boot-autoconfigure:2.7.2'
        implementation 'org.springframework.boot:spring-boot-configuration-processor:2.7.2'
        implementation 'org.springframework.boot:spring-boot-starter:2.7.2'
        implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.2'
        implementation 'org.springframework.boot:spring-boot-starter-jetty:2.7.2'
        implementation 'org.springframework.boot:spring-boot-starter-web:2.7.2'
        implementation 'org.springframework.boot:spring-boot:2.7.2'
        implementation 'org.testcontainers:testcontainers:1.18.3'
        // Required for testing
        testImplementation 'io.grpc:grpc-testing:1.49.2'
        testImplementation 'io.opentracing:opentracing-mock:0.32.0'
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.apache.curator:curator-test:4.3.0'
        testImplementation 'org.awaitility:awaitility:3.1.6'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
        testImplementation 'org.mockito:mockito-core:4.5.1'
        testImplementation 'org.mockito:mockito-inline:4.5.1'
        testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.2'
        testImplementation 'org.testcontainers:kafka:1.18.3'
    }

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'junit:junit'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.opentracing:opentracing-mock'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.10.0"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    // report is always generated after tests run
    finalizedBy jacocoTestReport
}

// Integration test
def integrationTest = sourceSets.create('integrationTest')

configurations[integrationTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[integrationTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    useJUnitPlatform()

    testClassesDirs = integrationTest.output.classesDirs
    classpath = configurations[integrationTest.runtimeClasspathConfigurationName] + integrationTest.output

    shouldRunAfter(tasks.named('test'))
}

tasks.named('jacocoTestReport') {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
    }
}

tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.9
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
            limit {
                counter = 'METHOD'
                minimum = 0.9
            }
        }
    }
}

tasks.named('check') {
    dependsOn jacocoTestCoverageVerification
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

publishing {
    repositories {
        // To test locally, invoke gradlew with `-PmavenUrl=file:///some/local/path`
        maven {
            group = "com.uber.uforwarder"
            version = mavenVersion
            url = mavenUrl
            allowInsecureProtocol = true
            credentials {
                username = mavenUsername
                password = mavenPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            pom {
                name = "UForwarder"
                description = "UForwarder"
                url = "http://www.uforwarder.com"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
            }
        }
    }
}
