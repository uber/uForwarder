load("//tooling/codegen/proto:proto.bzl", "uber_grpc_java_library", "uber_proto_java_library")

uber_proto_java_library(
    name = "proto_main",
    srcs = [
        "debug.proto",
        "job.proto",
        "job_group.proto",
        "job_snapshot.proto",
        "job_status.proto",
        "master_admin_service.proto",
        "master_worker_service.proto",
        "worker.proto",
    ],
    java_classes = [
        "com.uber.data.kafka.datatransfer.AddJobGroupRequest",
        "com.uber.data.kafka.datatransfer.AddJobGroupResponse",
        "com.uber.data.kafka.datatransfer.AuditConfig",
        "com.uber.data.kafka.datatransfer.AuditMetaData",
        "com.uber.data.kafka.datatransfer.AuditTask",
        "com.uber.data.kafka.datatransfer.AuditTaskGroup",
        "com.uber.data.kafka.datatransfer.AuditType",
        "com.uber.data.kafka.datatransfer.AutoOffsetResetPolicy",
        "com.uber.data.kafka.datatransfer.AvailabilityJobType",
        "com.uber.data.kafka.datatransfer.AvailabilityTask",
        "com.uber.data.kafka.datatransfer.AvailabilityTaskGroup",
        "com.uber.data.kafka.datatransfer.Command",
        "com.uber.data.kafka.datatransfer.CommandType",
        "com.uber.data.kafka.datatransfer.CrossDCAuditConfig",
        "com.uber.data.kafka.datatransfer.DebugJobRow",
        "com.uber.data.kafka.datatransfer.DebugJobStatusRow",
        "com.uber.data.kafka.datatransfer.DebugJobStatusTable",
        "com.uber.data.kafka.datatransfer.DebugJobsTable",
        "com.uber.data.kafka.datatransfer.DebugMasterRow",
        "com.uber.data.kafka.datatransfer.DebugMasterTable",
        "com.uber.data.kafka.datatransfer.DebugMessageStubRow",
        "com.uber.data.kafka.datatransfer.DebugMessageStubTable",
        "com.uber.data.kafka.datatransfer.DebugNav",
        "com.uber.data.kafka.datatransfer.DebugWorkerRow",
        "com.uber.data.kafka.datatransfer.DebugWorkersTable",
        "com.uber.data.kafka.datatransfer.DeleteJobGroupRequest",
        "com.uber.data.kafka.datatransfer.DeleteJobGroupResponse",
        "com.uber.data.kafka.datatransfer.EncodedFormatInfo",
        "com.uber.data.kafka.datatransfer.EncodedFormatType",
        "com.uber.data.kafka.datatransfer.FlowControl",
        "com.uber.data.kafka.datatransfer.GetAllJobGroupsRequest",
        "com.uber.data.kafka.datatransfer.GetAllJobGroupsResponse",
        "com.uber.data.kafka.datatransfer.GetJobGroupRequest",
        "com.uber.data.kafka.datatransfer.GetJobGroupResponse",
        "com.uber.data.kafka.datatransfer.HeartbeatRequest",
        "com.uber.data.kafka.datatransfer.HeartbeatResponse",
        "com.uber.data.kafka.datatransfer.IsolationLevel",
        "com.uber.data.kafka.datatransfer.Job",
        "com.uber.data.kafka.datatransfer.JobGroup",
        "com.uber.data.kafka.datatransfer.JobSnapshot",
        "com.uber.data.kafka.datatransfer.JobState",
        "com.uber.data.kafka.datatransfer.JobStatus",
        "com.uber.data.kafka.datatransfer.JobType",
        "com.uber.data.kafka.datatransfer.KafkaConsumerTask",
        "com.uber.data.kafka.datatransfer.KafkaConsumerTaskGroup",
        "com.uber.data.kafka.datatransfer.KafkaConsumerTaskStatus",
        "com.uber.data.kafka.datatransfer.KafkaDispatcherTask",
        "com.uber.data.kafka.datatransfer.KafkaDispatcherTaskGroup",
        "com.uber.data.kafka.datatransfer.KafkaDispatcherTaskStatus",
        "com.uber.data.kafka.datatransfer.MiscConfig",
        "com.uber.data.kafka.datatransfer.Node",
        "com.uber.data.kafka.datatransfer.Participants",
        "com.uber.data.kafka.datatransfer.RegisterWorkerRequest",
        "com.uber.data.kafka.datatransfer.RegisterWorkerResponse",
        "com.uber.data.kafka.datatransfer.ReplicationAuditConfig",
        "com.uber.data.kafka.datatransfer.ReplicationTask",
        "com.uber.data.kafka.datatransfer.ReplicationTaskGroup",
        "com.uber.data.kafka.datatransfer.ResqConfig",
        "com.uber.data.kafka.datatransfer.RetentionAuditConfig",
        "com.uber.data.kafka.datatransfer.RetryConfig",
        "com.uber.data.kafka.datatransfer.RetryQueue",
        "com.uber.data.kafka.datatransfer.RpcDispatcherTask",
        "com.uber.data.kafka.datatransfer.RpcDispatcherTaskGroup",
        "com.uber.data.kafka.datatransfer.ScaleStatus",
        "com.uber.data.kafka.datatransfer.SecurityConfig",
        "com.uber.data.kafka.datatransfer.StoredJob",
        "com.uber.data.kafka.datatransfer.StoredJobGroup",
        "com.uber.data.kafka.datatransfer.StoredJobStatus",
        "com.uber.data.kafka.datatransfer.StoredWorker",
        "com.uber.data.kafka.datatransfer.TopicInfo",
        "com.uber.data.kafka.datatransfer.TopicsToCompare",
        "com.uber.data.kafka.datatransfer.UpdateJobGroupRequest",
        "com.uber.data.kafka.datatransfer.UpdateJobGroupResponse",
        "com.uber.data.kafka.datatransfer.UpdateJobGroupStateRequest",
        "com.uber.data.kafka.datatransfer.UpdateJobGroupStateResponse",
        "com.uber.data.kafka.datatransfer.WorkerState",
        "com.uber.data.kafka.datatransfer.DebugProto",
        "com.uber.data.kafka.datatransfer.JobGroupProto",
        "com.uber.data.kafka.datatransfer.JobProto",
        "com.uber.data.kafka.datatransfer.JobSnapshotProto",
        "com.uber.data.kafka.datatransfer.JobStatusProto",
        "com.uber.data.kafka.datatransfer.MasterAdminServiceProto",
        "com.uber.data.kafka.datatransfer.MasterWorkerServiceProto",
        "com.uber.data.kafka.datatransfer.WorkerProto",
        "com.uber.data.kafka.datatransfer.PartitionOffsetRange",
        "com.uber.data.kafka.datatransfer.PartitionOffsetRanges",
        "com.uber.data.kafka.datatransfer.GetClusterScaleStatusRequest",
        "com.uber.data.kafka.datatransfer.GetClusterScaleStatusResponse",
    ],
    strip_import_prefix = "/idl/code.uber.internal/",
    visibility = [
        "//data/kafka/...",
    ],
)

uber_grpc_java_library(
    name = "grpc_main",
    srcs = [
        "debug.proto",
        "job.proto",
        "job_group.proto",
        "job_snapshot.proto",
        "job_status.proto",
        "master_admin_service.proto",
        "master_worker_service.proto",
        "worker.proto",
    ],
    java_classes = [
        "com.uber.data.kafka.datatransfer.MasterAdminServiceGrpc",
        "com.uber.data.kafka.datatransfer.MasterWorkerServiceGrpc",
    ],
    proto_library = ":proto_main",
    visibility = [
        "//data/kafka/...",
    ],
)
